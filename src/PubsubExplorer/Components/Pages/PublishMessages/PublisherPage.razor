@page "/publisher"
@using PubsubExplorer.Infrastructure.Google.PubSub

<MudText Typo="Typo.h4" Class="my-4">
    Publish a Message
</MudText>

<MudStack Spacing="4">

    <TopicSelector Model="_model"
                   OnTopicChanged="StateHasChanged"
                   Style="width: 100%"/>    

    <MudTextField Label="Message Body"
                  Variant="Variant.Outlined"
                  Lines="20"
                  FullWidth="true"
                  @bind-Value="@_model.Message"
                  AutoGrow />

    <MudChipField Label="Attributes" T="string"
                  HelperText="Key=value pairs. Separate each with a space."
                  HelperTextOnFocus="true"
                  Variant="Variant.Outlined"
                  ChipVariant="Variant.Filled"
                  ChipColor="Color.Tertiary"
                  Delimiter="' '"
                  @bind-Values="_model.Attributes"
                  @bind-Values:after="ValidateAttributes" />

    <MudNumericField Label="Repeat" Variant="Variant.Outlined"
                     Style="max-width: 100px;"
                     HelperText="How many times to post this message"
                     HelperTextOnFocus="true"
                     @bind-Value="_model.PostCount" />

    <div class="d-flex flex-row">
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   DropShadow="false"
                   Disabled="@(!_model.CanPost)"
                   OnClick="PublishMessage">
            Send
        </MudButton>
        <MudButton>
            Clear
        </MudButton>
    </div>

</MudStack>


@code {
    private PublisherViewModel _model = new();
    private PubSub _pubsub = new();

    private async Task PublishMessage()
    {
        if (!_model.CanPost || !_model.CanUsePublisherApi)
            return;

        var attributes = _model.Attributes.ToDictionary(
            kvp => kvp.Split('=')[0],
            kvp => kvp.Split('=')[1]
        );

        await _pubsub.PublishMessages(
            _model.Message,
            attributes,
            _model.SelectedProject,
            _model.SelectedTopic,
            _model.PostCount);
    }

    private void ValidateAttributes()
    {
        _model.Attributes.RemoveAll(a => a.Split('=').Length != 2);
        StateHasChanged();
    }

    private void ModelUpdated(TopicSelectionModel vm) => StateHasChanged();
}
