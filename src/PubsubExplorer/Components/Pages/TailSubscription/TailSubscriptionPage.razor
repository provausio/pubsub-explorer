@page "/subscriptions/tail"

@inherits PageBase

@inject ILogger<TailSubscriptionPage> Logger

@using Google.Cloud.PubSub.V1
@using Infrastructure.Google.PubSub;
@using Microsoft.Extensions.Logging
@using System.Text.RegularExpressions

<MudText Typo="Typo.h4" Class="my-4">
    Tail a Topic
</MudText>

<MudStack Spacing="4">
    <SubscriptionSelector @bind-Model="_model" 
                          HighlightItemCondition="@(s => s.Equals(_model.TempSubscriptionName))"
                          Disabled="_model.IsListening">
        <SubscriptionBeforeItems>
            <MudButton Color="Color.Primary" FullWidth="true"
                       StartIcon="@Icons.Material.Filled.AddCircle"
                       Variant="Variant.Outlined"
                       OnClick="CreateTempSubscription">
                Add Temp Subscription
            </MudButton>
        </SubscriptionBeforeItems>
    </SubscriptionSelector>

    <MudField Label="Options"
              Variant="Variant.Outlined">

        <div class="d-flex flex-row" style="gap: 16px;">
            <MudTextField Label="Filter Body"
                          HelperText="JsonPath"
                          HelperTextOnFocus="true"
                          Immediate="true"
                          DebounceInterval="250"
                          @bind-Value="@_model.JsonPathFilter"
                          @bind-Value:after="SearchMessageBodies"
                          AutoGrow />

            <MudNumericField Label="Message Count"
                             Style="max-width: 100px;"
                             @bind-Value="_model.MessageBufferSize" />
        </div>

        <div class="d-flex align-content-center">

            <MudButton Variant="Variant.Filled"
                       Color="@(_model.IsListening ? Color.Error : Color.Primary)"
                       OnClick="ToggleConsumer">

                @if (_model.IsListening)
                {
                    @("Stop")
                }
                else
                {
                    @("Start")
                }

            </MudButton>

            @if (_stopReason is not null)
            {
                <MudText Color="Color.Warning" Class="ml-4 pa-2">
                    @_stopReason
                </MudText>
            }
        </div>        

    </MudField>

    @if (_model.FilteredMessagePage.Any())
    {
        <MessageBrowser Model="_model" />
    }
</MudStack>

@code {
    private TailSubscriptionViewModel _model = new();    
    private PubSub _pubsub = new();
    private SubscriberClient? _subscriber;
    private Task? _listenerTask;
    private string? _stopReason;

    private bool IsRunning => _model.IsListening;

    private async Task ToggleConsumer()
    {
        var canceled = false;

        try
        {
            if (!_model.IsListening)
            {
                var result = await DialogService.ShowMessageBox(
                    "Start Consumer?",
                    @"Starting this will consume messages from the subscription. Messages will be acked and thus removed from the subscription. It is recommended that you're using a temporary subscription or else other consumers will not receive any messages that were already pulled by this subscription.",
                    yesText: "Start Consuming",
                    noText: "Cancel"
                );

                canceled = result is null or false;
                await StartConsumer();
            }
            else
            {
                await StopConsumer();
            }
        }
        finally
        {
            if (!canceled)
            {
                _model.IsListening = !_model.IsListening;
            }

            await InvokeAsync(StateHasChanged);
        }        
    }

    private async Task StartConsumer()
    {
        if (!_model.CanUseSubscriptionApi)
            return;

        if(_listenerTask is not null)
        {
            Logger.LogWarning("Subscriber is already running.");
            return;
        }

        _stopReason = null;
        var hasSubscriberClient = await Try(async () =>
        {
            _subscriber = await _pubsub.GetSubscriberClient(
                _model.SelectedProject,
                _model.SelectedSubscription);
        });

        if (!hasSubscriberClient)
        {
            ClearListenerResources();
            return;
        }

        _listenerTask = _subscriber!.StartAsync(ReceiveMessage); 
    }

    private async Task StopConsumer()
    {
        if(_subscriber is null)
        {
            Logger.LogWarning("Subscriber is not running.");
            return;
        }

        await _subscriber.StopAsync(CancellationToken.None);

        try
        {
            if(_listenerTask != null)
            {
                await _listenerTask;
            }
        }
        catch (OperationCanceledException){}
        finally
        {
            ClearListenerResources();
        }

    }

    private void ClearListenerResources()
    {
        _listenerTask = null;
    }

    private async Task<SubscriberClient.Reply> ReceiveMessage(
        PubsubMessage message, 
        CancellationToken ct)
    {
        var messageVm = MessageViewModel.FromPubsub(message, null, DateTimeOffset.MinValue);
        _model.PushMessage(messageVm);

        if (_model.BufferIsFull)
        {
            Task.Run(() => ToggleConsumer());  // DO NOT await this
            _stopReason = "Message buffer exceeded";
        }

        await InvokeAsync(StateHasChanged);

        return SubscriberClient.Reply.Ack;
    }

    private async Task CreateTempSubscription()
    {
        if (!_model.CanUsePublisherApi)  // only need this because we're creating the sub
            return;
                    
        var created = await Try(async () =>
        {
            var newSubscription = await _pubsub.CreateTempSubscription(
                _model.SelectedProject,
                _model.SelectedTopic,
                _model.TempSubscriptionName);
        });

        if (!created)
            return;

        _model.AvailableSubscriptions.Add(_model.TempSubscriptionName);
        _model.SelectedSubscription = _model.TempSubscriptionName;
    }    

    private void SearchMessageBodies()
    {
        
    }
}

