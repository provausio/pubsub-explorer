@typeparam T where T : TopicSelectionModel

@using System.Diagnostics.CodeAnalysis
@using PubsubExplorer.Ext
@using PubsubExplorer.Infrastructure.Google.PubSub

@if(Model is not null)
{
    <MudStack Row="true" Spacing="2" Style="@($"width: 50%;{Style}")">
        <MudTextField Label="GCP Project"
                      Variant="Variant.Outlined"
                      Immediate="true"
                      DebounceInterval="250"
                      Disabled="Disabled"
                      Clearable="true"
                      @bind-Value="@Model.SelectedProject"
                      @bind-Value:after="ClearTopics" />

        <MudAutocomplete T="string" @ref="_topicSelect"
                         Label="Topics"
                         Variant="Variant.Outlined"
                         SearchFunc="@SearchTopics"
                         Strict="true"
                         ShowProgressIndicator="true"
                         Disabled="Disabled"
                         @bind-Value="Model.SelectedTopic"
                         @bind-Value:after="OnTopicChanged.InvokeAsync">

            <NoItemsTemplate>
                <MudText Align="Align.Center" class="px-4 py-1">
                    No topics found
                </MudText>
            </NoItemsTemplate>

        </MudAutocomplete>
    </MudStack>
}

@code {
    [Parameter, EditorRequired]
    public T? Model { get; set; }

    [Parameter]
    public EventCallback<T> ModelChanged { get; set; }

    [Parameter]
    public EventCallback OnTopicChanged { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter, StringSyntax("Regex")]
    public string? TopicFilter { get; set; }

    [Parameter]
    public string? Style { get; set; }

    private MudAutocomplete<string>? _topicSelect;
    private PubSub _pubsub = new();

    private async Task LoadTopics(int maxTopics = 100)
    {
        if (Model is null || string.IsNullOrWhiteSpace(Model.SelectedProject))
            return;

        await ClearTopics();

        var topics = await _pubsub.ListTopics(Model.SelectedProject, maxTopics);
        if (!topics.HasValue)
            return;

        TopicFilter.TryParseRegex(out var pattern, true);
        Model.AvailableTopics = (topics.Value.Topics)
            .Select(t => t.TopicId)
            .Where(t => pattern.IsMatch(t))
            .ToList();

        await UpdateModel();
    }

    private async Task<IEnumerable<string>> SearchTopics(string? value, CancellationToken cancel)
    {
        if (Model is null)
            return [];

        if (Model.AvailableTopics.Count < 1)
            await LoadTopics();

        if (value is null)
            return Model.AvailableTopics.OrderBy(x => x);

        return Model.AvailableTopics
            .Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .OrderBy(x => x);
    }

    private async Task ClearTopics()
    {
        if (Model is null)
            return;

        Model.AvailableTopics.Clear();
        Model.SelectedTopic = null;

        await (_topicSelect?.ClearAsync() ?? Task.CompletedTask);
        await OnTopicChanged.InvokeAsync();
        await UpdateModel();
    }

    private async Task UpdateModel() => await ModelChanged.InvokeAsync(Model);
}
